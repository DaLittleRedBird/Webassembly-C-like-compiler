/*
A javascript parser for a C-like language
*/
function lexCLike(script) {
    let coins = [];
    for (let idx = 0; idx < script.length; idx++) {
        switch (script[idx]) {
            case "(": case "[": case "{": coins.push({tokType : "leftgrouper", tokName : script[idx]}); break;
            case ")": case "]": case "}": coins.push({tokType : "rightgrouper", tokName : script[idx]}); break;
            case "~": case "!": coins.push({tokType : "unaryop", tokName : script[idx]}); break;
            case "+": case "-": case "*": case "/": case "%": case "&": case "^": case "|": coins.push({tokType : "binop", tokName : script[idx]}); break;
            case ">": case "<": coins.push({tokType : "compareop", tokName : script[idx]}); break;
            case "=": coins.push({tokType : "assignop", tokName : script[idx]}); break;
            case ".": coins.push({tokType : "memberop", tokName : script[idx]}); break;
            case ",": coins.push({tokType : "commaop", tokName : script[idx]}); break;
            case ";": case "\n": case "\r": coins.push({tokType : "stmtend", tokName : script[idx]}); break;
            default:
                let curTok = "", curType = "identifier", curCharCode = script[idx].charCode();
                if (curCharCode >= 48 && curCharCode <= 57) { curType = "intconst"; }
                while ((curCharCode >= 48 && curCharCode <= 57 || curCharCode >= 65 && curCharCode <= 90 || curCharCode >= 97 && curCharCode <= 122 || curCharCode == 95) && idx < script.length) {
                    curTok += script[idx];
                    idx++;
                    curCharCode = script[idx].charCode();
                }
                switch (curTok) {
                    case "if": case "else": case "do": case "while": case "for": case "switch": case "case": case "default": curType = "controlflow"; break;
                    case "goto": case "fallthru": case "break": case "continue": curType = "gotostmt"; break;
                    case "void": case "bool": case "char": case "byte": case "short": case "int": case "long": case "float": case "double": case "unsigned": curType = "datatype"; break;
                    case "auto": case "const": case "extern": case "static": case "register": curType = "storagespec"; break;
                    case "true": case "false": curType = "boolconst"; break;
                    case "nullptr": curType = "nullptrconst"; break;
                }
                coins.push({tokType : curType, tokName : curTok});
            break;
        }
    }
    return coins;
}

function parseDatatype(tokens, curindex) {
    let stack = ["<FNPTR>"], tree = [], ids = {};
    ;
    return {ast : tree, identifiers : ids, nextidx : curindex};
}

function parseExpression(tokens, curindex) {
    let stack = ["<EXPR>"], tree = [], ids = {};
    ;
    return {ast : tree, identifiers : ids, nextidx : curindex};
}

function parseCLike(script) {
    let tokens = lexCLike(script), stack = ["<PGRM>"], tree = [], ids = {};
    for (let jdx = 0; jdx < tokens.length;) {
        switch (tokens[jdx].tokType) {
            case "controlflow": jdx++; break;
            case "gotostmt": jdx++; break;
            case "leftgrouper": jdx++; break;
            case "rightgrouper": jdx++; break;
            case "datatype":
                let curNode = { nodeOp : null, nodeReturntype : tokens[jdx].tokType, pointerdepth : 0 }, curChild = curNode;
                jdx++;
                while (tokens[jdx].tokName === "*") { curNode.pointerdepth++; jdx++; }
                switch (tokens[jdx].tokType) {
                    case "identifier":
                        jdx++;
                        if (tokens[jdx].tokType == "(") {
                            ;
                        } else if (tokens[jdx].tokType == "=") {
                            ;
                        } else {return "syntax error";}
                    break;
                    case "(":
                        let ptrChild = parseDatatype(tokens, jdx + 1);
                        if (ptrChild === "syntax error") {return "syntax error";}
                        ;
                    break;
                    case "[":
                        let arrayChild = parseExpression(tokens, jdx + 1);
                        if (arrayChild === "syntax error") {return "syntax error";}
                        ;
                    break;
                    default: return "syntax error";
                }
                jdx += 2; 
            break;
            case "identifier": jdx++; break;
            case "intconst": jdx++; break;
            case "stmtend": jdx++; break;
            default: return "syntax error";
        }
    }
    if (stack.length > 0 && (stack[stack.length - 1] === "<FNPRMS>" || stack[stack.length - 1] === "<FNBDY>")) {return "syntax error";}
    return {ast : tree, identifiers : ids};
}

/*
int x = 9;
int foo() {
    x = x + 1;
    return x;
}
int main() {
    int y = foo() - 10;
    return y;
}
*/
